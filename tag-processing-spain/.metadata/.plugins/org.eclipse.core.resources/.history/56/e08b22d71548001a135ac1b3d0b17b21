package com.vasantlab.tag.processingservice;

/**
 * Once the data is available on the COMPORT as input, this event processor would be triggered to handle 
 * transition of flow.
 * The <code>onApplicationEvent</code> would be triggered with given <code>CommPortEvent</code> object 
 * which will provide data received in <code>char[]</code>
 * 
 **/
@Component
public class CommPortEventsProcessor implements ApplicationListener<CommPortEvent> {
	private static Logger log = LoggerFactory.getLogger(CommPortEventsProcessor.class);
	@Autowired
	private TagContext tagContext;

	@Override
	public void onApplicationEvent(CommPortEvent event) {
		if (event.getData() != null) {
			//char[] portData = null;
			CommPortEvent commPortEvent = event;
			char[] receive = (char[]) commPortEvent.getData();
			String recevieData = String.valueOf(receive);
			//portData = recevieData.toCharArray();
			if (CachingUtil.cachingErrorCode.get("ErrorCode") != null) {
				String errorCode = CachingUtil.cachingErrorCode.get("ErrorCode");
				ErrorCommunicationState state=ErrorCommunicationState.fromString(errorCode);
				String error = state.getErrorCommunicationState();
				boolean result = CommPortCommandUtil.getCommand(error, recevieData);
				if(result){
					log.info("Byte Received " + String.valueOf(recevieData.toCharArray()));
					CachingUtil.cachingReceiveByte.set("receiveByte", recevieData.toCharArray());
					tagContext.processCommPortData(recevieData.toCharArray());
				}	
			}else{
				log.info("Byte Received " + String.valueOf(recevieData.toCharArray()));
				CachingUtil.cachingReceiveByte.set("receiveByte", recevieData.toCharArray());
				tagContext.processCommPortData(recevieData.toCharArray());
			}
			
		}
		if (event.getData() == null) {
			log.info("Command not Received waiting for command.");
		}
	}
}
