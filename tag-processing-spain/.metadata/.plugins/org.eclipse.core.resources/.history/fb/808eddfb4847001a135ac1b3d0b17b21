package com.vasantlab.tag.processingservice;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.ApplicationEventPublisherAware;
import org.springframework.stereotype.Service;

import com.vasanthlab.dao.data.service.interfaces.RFIDDataService;
import com.vasanthlab.dao.data.service.interfaces.RFIDErrorLogDataService;
import com.vasanthlab.serialport.comm.CommPortEvent;
import com.vasantlab.data.tables.RFIDData;
import com.vasantlab.data.tables.RFIDErrorLog;
import com.vasantlab.tag.processingservice.interfaces.TagErrorProcessingService;
import com.vasantlab.util.CachingUtil;
import com.vasantlab.util.CommPortCommandUtil;
import com.vasantlab.util.ErrorCommunicationState;

@Service("tagErrorProcessingService")
public class TagErrorProcessingServiceImpl implements TagErrorProcessingService, ApplicationEventPublisherAware {

	private static Logger log = LoggerFactory.getLogger(TagErrorProcessingServiceImpl.class);

	private ApplicationEventPublisher publisher;
	@Autowired
	private RFIDErrorLogDataService rfidErrorLogDataService;
	@Autowired
	private RFIDDataService rfidDataService;

	@Override
	public void tagErrorProcessing(String errorCode) {
		if (errorCode == "02" || errorCode == "03") {
			List<RFIDData> tagRfidData = rfidDataService.finddata(CachingUtil.caching.get("orderId"),
					CachingUtil.caching.get("barcode"));
			if (tagRfidData.size() == 0) {
				if (errorCode == "02") {
					errorCode = "020A";
				} else if (errorCode == "03") {
					errorCode = "030A";
				}
			}
		}

		CachingUtil.cachingErrorCode.set("ErrorCode", errorCode);
		ErrorCommunicationState state = ErrorCommunicationState.fromString(errorCode);
		log.info(state.getErrorCommunicationState());

		if (state.getCommandByte() != null) {
			RFIDErrorLog rfidErrorLog = new RFIDErrorLog();
			rfidErrorLog.setOrder_id(CachingUtil.caching.get("orderId"));
			rfidErrorLog.setBar_code(CachingUtil.caching.get("barcode"));
			rfidErrorLog.setError_code(errorCode);
			rfidErrorLog.setMsg(state.getErrorCommunicationState());
			rfidErrorLog.setDate(java.time.LocalDate.now().toString());
			rfidErrorLog.setTime(java.time.LocalTime.now().toString());
			// epc need to set

			// rfidErrorLogDataService.saveRFIDErrorLogData(rfidErrorLog);

			publisher.publishEvent(new CommPortEvent(CommPortCommandUtil.ERRORCODECOMMAND));
		}
		

	}

	@Override
	public void setApplicationEventPublisher(ApplicationEventPublisher publisher) {
		this.publisher = publisher;
	}

}
